groups:
- name: main
  jobs:
  - build
  - deploy-app
  - promote-new-version

resource_types:
- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource

resources:
- name: pull-registrydemo-source
  type: git
  source:
    branch: master
    uri: https://github.com/Leisureroad/registrydemo.git
- name: PWS
  type: cf
  source:
    api: {{pws-api}}
    organization: {{pws-organization}}
    username: {{deploy-username}}
    password: {{deploy-password}}
    skip_cert_check: true
    space: {{pws-space}}
- name: artifactory-repository
  type: artifactory
  check_every: 1m
  source:
    endpoint: http://10.34.53.16:8081/artifactory
    repository: "/myrepo"
    regex: "registrydemo-(?<version>.*).jar"
    username: admin
    password: password
jobs:
#  First job: Package Application as a JAR and Upload to S3 Bucket for storage
- name: build
  plan:
   # Check for new commit (trigger=true), 'code' refers to GIT resource
   - get: pull-registrydemo-source
     trigger: true
   # Package and copy application to output 'build' folder
   - task: compile
     config:
       # Use a docker image with Maven to build application
       platform: linux
       image_resource:
         type: docker-image
         source:
           repository: maven
       # 'code' folder contains checkout code
       inputs:
         - name: pull-registrydemo-source
       # 'build' folder is used to store file for next PUT step after RUN step
       outputs:
         - name: target
       caches:
         - path: pull-registrydemo-source/.m2
       # RUN step allows inline command and FILE step allow to use external task file
       run:
         path: sh
         args:
         - -c
         - |
           mvn -f pull-registrydemo-source/pom.xml package -Dmaven.repo.local=pull-registrydemo-source/.m2
           ls -al
           mv pull-registrydemo-source/target/registrydemo-0.0.1-SNAPSHOT.jar pull-registrydemo-source/target/registrydemo-0.0.3-SNAPSHOT.jar
           ls -al pull-registrydemo-source/target/registrydemo-0.0.3-SNAPSHOT.jar
#           curl -uadmin:AP2eUJGk81RwYFjj6RJdrve2MXY -T pull-registrydemo-source/target/registrydemo-0.0.1-SNAPSHOT.jar "http://10.34.53.16:8081/artifactory/myrepo/registrydemo-0.0.2-SNAPSHOT.jar"
#   - get: artifactory-repository
#     trigger: false
#           cp target/registrydemo-*.jar target/registrydemo-0.0.1-SNAPSHOT.jar
  #  Upload build/demo.jar to S3 bucket, 'storage' refers to S3 Resource
   - put: artifactory-repository
     params: { file: ./target/registrydemo-*.jar }
- name: deploy-app
  serial: true
  public: true
  plan:
  - get: pull-registrydemo-source
    trigger: true
    passed:
      - build
  - task: get-current-app-color
    file: pull-registrydemo-source/ci/tasks/current-app-get-info.yml
    params:
      PWS_APP_SUFFIX: {{pws-app-suffix}}
      PWS_API: {{pws-api}}
      PWS_ORG: {{pws-organization}}
      PWS_USER: {{deploy-username}}
      PWS_PWD: {{deploy-password}}
      PWS_SPACE: {{pws-space}}
  - task: prepare-app-manifest
    file: pull-registrydemo-source/ci/tasks/app-manifest-prep.yml
    params:
      PWS_APP_SUFFIX: {{pws-app-suffix}}
#  - get: artifactory-repository
#    trigger: true
#    passed:
#      - build
#  - task: copy-jar-file
#    config:
#      platform: linux
#      image_resource:
#        type: docker-image
#        source:
#          repository: ubuntu
#      inputs:
#        - name: artifactory-repository
#      outputs:
#        - name: target
#      run:
#        path: sh
#        args:
#        - -c
#        - |
#          cp artifactory-repository/registrydemo-*.jar target/registrydemo-0.0.1-SNAPSHOT.jar
#   - task: get-jar-file
#     config:
##       # Use a docker image with Maven to build application
##       platform: linux
##       image_resource:
##         type: docker-image
##         source:
##           repository: maven
##       # 'code' folder contains checkout code
#       inputs:
#         - name: pull-registrydemo-source
##       # 'build' folder is used to store file for next PUT step after RUN step
#       outputs:
#         - name: target
##       caches:
##         - path: pull-registrydemo-source/.m2
##       # RUN step allows inline command and FILE step allow to use external task file
#       run:
#         path: sh
#         args:
#         - -c
#         - |
##           mvn -f pull-registrydemo-source/pom.xml package -Dmaven.repo.local=pull-registrydemo-source/.m2
##           ls -al
#           curl -uadmin:AP2eUJGk81RwYFjj6RJdrve2MXY -O "http://10.34.53.16:8081/artifactory/myrepo/registrydemo-0.0.1-SNAPSHOT.jar"
#           cp registrydemo-0.0.1-SNAPSHOT.jar target/registrydemo-0.0.1-SNAPSHOT.jar
  - get: artifactory-repository
  - put: PWS
    params:
      manifest: app-manifest-output/manifest.yml
#      path: app-manifest-output/registrydemo-0.0.2-SNAPSHOT.jar
      path: artifactory-repository/registrydemo-0.0.3-SNAPSHOT.jar

- name: promote-new-version
  serial: true
  public: true
  plan:
  - get: pull-registrydemo-source
    trigger: true
    passed:
      - deploy-app
  - task: get-current-app-color
    file: pull-registrydemo-source/ci/tasks/current-app-get-info.yml
    params:
      PWS_APP_SUFFIX: {{pws-app-suffix}}
      PWS_API: {{pws-api}}
      PWS_ORG: {{pws-organization}}
      PWS_USER: {{deploy-username}}
      PWS_PWD: {{deploy-password}}
      PWS_SPACE: {{pws-space}}
  - task: switch-app-routes
    file: pull-registrydemo-source/ci/tasks/update-routes.yml
    params:
      PWS_APP_SUFFIX: {{pws-app-suffix}}
      PWS_APP_DOMAIN: {{pws-app-domain}}
      PWS_API: {{pws-api}}
      PWS_ORG: {{pws-organization}}
      PWS_USER: {{deploy-username}}
      PWS_PWD: {{deploy-password}}
      PWS_SPACE: {{pws-space}}
